/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package AAACustomerServices.model.impl;

import AAACustomerServices.model.Customer;
import AAACustomerServices.model.CustomerModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Customer service. Represents a row in the &quot;AAA_Customer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>CustomerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CustomerImpl
 * @generated
 */
public class CustomerModelImpl
	extends BaseModelImpl<Customer> implements CustomerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer model instance should use the <code>Customer</code> interface instead.
	 */
	public static final String TABLE_NAME = "AAA_Customer";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"customerId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"email", Types.VARCHAR},
		{"address", Types.VARCHAR}, {"national_Id", Types.VARCHAR},
		{"contact", Types.VARCHAR}, {"start_date", Types.TIMESTAMP},
		{"serviceId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"userName", Types.VARCHAR}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("email", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("national_Id", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contact", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("start_date", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("serviceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AAA_Customer (uuid_ VARCHAR(75) null,customerId LONG not null primary key,name VARCHAR(75) null,email VARCHAR(75) null,address VARCHAR(75) null,national_Id VARCHAR(75) null,contact VARCHAR(75) null,start_date DATE null,serviceId LONG,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table AAA_Customer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY customer.start_date ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AAA_Customer.start_date ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long START_DATE_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public CustomerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _customerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCustomerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Customer.class;
	}

	@Override
	public String getModelClassName() {
		return Customer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Customer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Customer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Customer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Customer)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Customer, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Customer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Customer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Customer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Customer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Customer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Customer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Customer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Customer, Object>>();
		Map<String, BiConsumer<Customer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Customer, ?>>();

		attributeGetterFunctions.put("uuid", Customer::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Customer, String>)Customer::setUuid);
		attributeGetterFunctions.put("customerId", Customer::getCustomerId);
		attributeSetterBiConsumers.put(
			"customerId", (BiConsumer<Customer, Long>)Customer::setCustomerId);
		attributeGetterFunctions.put("name", Customer::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<Customer, String>)Customer::setName);
		attributeGetterFunctions.put("email", Customer::getEmail);
		attributeSetterBiConsumers.put(
			"email", (BiConsumer<Customer, String>)Customer::setEmail);
		attributeGetterFunctions.put("address", Customer::getAddress);
		attributeSetterBiConsumers.put(
			"address", (BiConsumer<Customer, String>)Customer::setAddress);
		attributeGetterFunctions.put("national_Id", Customer::getNational_Id);
		attributeSetterBiConsumers.put(
			"national_Id",
			(BiConsumer<Customer, String>)Customer::setNational_Id);
		attributeGetterFunctions.put("contact", Customer::getContact);
		attributeSetterBiConsumers.put(
			"contact", (BiConsumer<Customer, String>)Customer::setContact);
		attributeGetterFunctions.put("start_date", Customer::getStart_date);
		attributeSetterBiConsumers.put(
			"start_date", (BiConsumer<Customer, Date>)Customer::setStart_date);
		attributeGetterFunctions.put("serviceId", Customer::getServiceId);
		attributeSetterBiConsumers.put(
			"serviceId", (BiConsumer<Customer, Long>)Customer::setServiceId);
		attributeGetterFunctions.put("groupId", Customer::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Customer, Long>)Customer::setGroupId);
		attributeGetterFunctions.put("companyId", Customer::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Customer, Long>)Customer::setCompanyId);
		attributeGetterFunctions.put("userId", Customer::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Customer, Long>)Customer::setUserId);
		attributeGetterFunctions.put("userName", Customer::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<Customer, String>)Customer::setUserName);
		attributeGetterFunctions.put("createDate", Customer::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Customer, Date>)Customer::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Customer::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<Customer, Date>)Customer::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getCustomerId() {
		return _customerId;
	}

	@Override
	public void setCustomerId(long customerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerId = customerId;
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public String getEmail() {
		if (_email == null) {
			return "";
		}
		else {
			return _email;
		}
	}

	@Override
	public void setEmail(String email) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_email = email;
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@Override
	public String getNational_Id() {
		if (_national_Id == null) {
			return "";
		}
		else {
			return _national_Id;
		}
	}

	@Override
	public void setNational_Id(String national_Id) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_national_Id = national_Id;
	}

	@Override
	public String getContact() {
		if (_contact == null) {
			return "";
		}
		else {
			return _contact;
		}
	}

	@Override
	public void setContact(String contact) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contact = contact;
	}

	@Override
	public Date getStart_date() {
		return _start_date;
	}

	@Override
	public void setStart_date(Date start_date) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_start_date = start_date;
	}

	@Override
	public long getServiceId() {
		return _serviceId;
	}

	@Override
	public void setServiceId(long serviceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_serviceId = serviceId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Customer.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Customer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Customer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Customer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomerImpl customerImpl = new CustomerImpl();

		customerImpl.setUuid(getUuid());
		customerImpl.setCustomerId(getCustomerId());
		customerImpl.setName(getName());
		customerImpl.setEmail(getEmail());
		customerImpl.setAddress(getAddress());
		customerImpl.setNational_Id(getNational_Id());
		customerImpl.setContact(getContact());
		customerImpl.setStart_date(getStart_date());
		customerImpl.setServiceId(getServiceId());
		customerImpl.setGroupId(getGroupId());
		customerImpl.setCompanyId(getCompanyId());
		customerImpl.setUserId(getUserId());
		customerImpl.setUserName(getUserName());
		customerImpl.setCreateDate(getCreateDate());
		customerImpl.setModifiedDate(getModifiedDate());

		customerImpl.resetOriginalValues();

		return customerImpl;
	}

	@Override
	public Customer cloneWithOriginalValues() {
		CustomerImpl customerImpl = new CustomerImpl();

		customerImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		customerImpl.setCustomerId(
			this.<Long>getColumnOriginalValue("customerId"));
		customerImpl.setName(this.<String>getColumnOriginalValue("name"));
		customerImpl.setEmail(this.<String>getColumnOriginalValue("email"));
		customerImpl.setAddress(this.<String>getColumnOriginalValue("address"));
		customerImpl.setNational_Id(
			this.<String>getColumnOriginalValue("national_Id"));
		customerImpl.setContact(this.<String>getColumnOriginalValue("contact"));
		customerImpl.setStart_date(
			this.<Date>getColumnOriginalValue("start_date"));
		customerImpl.setServiceId(
			this.<Long>getColumnOriginalValue("serviceId"));
		customerImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		customerImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		customerImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		customerImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		customerImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		customerImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return customerImpl;
	}

	@Override
	public int compareTo(Customer customer) {
		int value = 0;

		value = DateUtil.compareTo(getStart_date(), customer.getStart_date());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Customer)) {
			return false;
		}

		Customer customer = (Customer)object;

		long primaryKey = customer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Customer> toCacheModel() {
		CustomerCacheModel customerCacheModel = new CustomerCacheModel();

		customerCacheModel.uuid = getUuid();

		String uuid = customerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			customerCacheModel.uuid = null;
		}

		customerCacheModel.customerId = getCustomerId();

		customerCacheModel.name = getName();

		String name = customerCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			customerCacheModel.name = null;
		}

		customerCacheModel.email = getEmail();

		String email = customerCacheModel.email;

		if ((email != null) && (email.length() == 0)) {
			customerCacheModel.email = null;
		}

		customerCacheModel.address = getAddress();

		String address = customerCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			customerCacheModel.address = null;
		}

		customerCacheModel.national_Id = getNational_Id();

		String national_Id = customerCacheModel.national_Id;

		if ((national_Id != null) && (national_Id.length() == 0)) {
			customerCacheModel.national_Id = null;
		}

		customerCacheModel.contact = getContact();

		String contact = customerCacheModel.contact;

		if ((contact != null) && (contact.length() == 0)) {
			customerCacheModel.contact = null;
		}

		Date start_date = getStart_date();

		if (start_date != null) {
			customerCacheModel.start_date = start_date.getTime();
		}
		else {
			customerCacheModel.start_date = Long.MIN_VALUE;
		}

		customerCacheModel.serviceId = getServiceId();

		customerCacheModel.groupId = getGroupId();

		customerCacheModel.companyId = getCompanyId();

		customerCacheModel.userId = getUserId();

		customerCacheModel.userName = getUserName();

		String userName = customerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			customerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			customerCacheModel.createDate = createDate.getTime();
		}
		else {
			customerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			customerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			customerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return customerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Customer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Customer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Customer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Customer)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Customer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Customer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Customer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Customer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Customer>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Customer.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _customerId;
	private String _name;
	private String _email;
	private String _address;
	private String _national_Id;
	private String _contact;
	private Date _start_date;
	private long _serviceId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Customer, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Customer)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("customerId", _customerId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("email", _email);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("national_Id", _national_Id);
		_columnOriginalValues.put("contact", _contact);
		_columnOriginalValues.put("start_date", _start_date);
		_columnOriginalValues.put("serviceId", _serviceId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("customerId", 2L);

		columnBitmasks.put("name", 4L);

		columnBitmasks.put("email", 8L);

		columnBitmasks.put("address", 16L);

		columnBitmasks.put("national_Id", 32L);

		columnBitmasks.put("contact", 64L);

		columnBitmasks.put("start_date", 128L);

		columnBitmasks.put("serviceId", 256L);

		columnBitmasks.put("groupId", 512L);

		columnBitmasks.put("companyId", 1024L);

		columnBitmasks.put("userId", 2048L);

		columnBitmasks.put("userName", 4096L);

		columnBitmasks.put("createDate", 8192L);

		columnBitmasks.put("modifiedDate", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Customer _escapedModel;

}